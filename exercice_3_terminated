


/**
  * Created by fhantry on 18/05/2016.
  */

import org.apache.spark.{SparkConf, SparkContext}
import org.apache.spark.sql.SQLContext
import org.apache.spark.sql.functions
import breeze.linalg._
import breeze.plot._

// I will use breeze package for plots, the end of exercice 3 will be delivered friday morning
object plot_monthly_searches {
  def main(args : Array[String]) = {
    val conf = new SparkConf().setAppName("top_10").setMaster("local")
    val sc = new SparkContext(conf)
    val sqlContext = new SQLContext(sc)
    import sqlContext.implicits._
    val csvParser =
      sqlContext.
        read.
        format("com.databricks.spark.csv").
        option("header", "true"). //headers at the first line
        option("delimiter", "^"). // ^ delimits the columns
        option("mode", "DROPMALFORMED"). // I had some problems with some rows with wrong number of delimiters so I dropped the bad rows
        option("inferSchema", "true") // Even it is a little bit time elapsing, at least get easily the right type, particularly the integertype, for aggregating on pax column


    val df2 =
      csvParser.load("D:/Userfiles/fhantry/Desktop/searches.csv")
    //pushing deepest the selection constraint for optimization purpose
    val df3 = df2.select("Date","Destination").where(df2("Destination").isin("AGP","BCN","MAD"))
    val df4 = df3.withColumn("yearmonth",org.apache.spark.sql.functions.month(df3("Date"))) // I simplify by ordinal since there is only one year 2013
    val df_monthly_searches = df4.groupBy("yearmonth","Destination").count()
// keep in cache for several next call
    df_monthly_searches.cache()
    df_monthly_searches.registerTempTable("monthly")
    val Malaga_Monthly =  df_monthly_searches.sqlContext.sql("SELECT yearmonth , count  FROM monthly WHERE Destination = 'AGP' ")
    println("Malaga Monthly")
    Malaga_Monthly.sort("yearmonth").show()
    val Madrid_Monthly =  df_monthly_searches.sqlContext.sql("SELECT yearmonth , count  FROM monthly WHERE Destination = 'MAD' ")
    println("Madrid Monthly")
    Madrid_Monthly.sort("yearmonth").show()
    val Barcelona_Monthly =  df_monthly_searches.sqlContext.sql("SELECT yearmonth , count  FROM monthly WHERE Destination = 'BCN' ")
    println("Madrid Monthly")
    Barcelona_Monthly.sort("yearmonth").show()

    //I realize there is exactly 12 values for each case
    // starting using breeze library
    val   month = DenseVector(1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0,10.0,11.0,12.0)


    // for changing type
    val toDouble = org.apache.spark.sql.functions.udf[Double, String]( _.toDouble)
    val toInt = org.apache.spark.sql.functions.udf[Int, String]( _.toInt)


    //for malaga
    var count_search_malaga = DenseVector.zeros[Double](12)
    // sorting by months
    val Malaga_sort = Malaga_Monthly.sort("yearmonth")

    val MalagaDouble = Malaga_sort.withColumn("count",toDouble(Malaga_sort("count")))



    // we could create also a function for factorizing the code and apply to Malaga, Madrid and Barcelone, but  we do not do that

    //store in vector the Malaga monthly searches
    MalagaDouble.collect().foreach(row=> count_search_malaga(row(0).asInstanceOf[Int]-1)  =row(1).asInstanceOf[Double])

    var count_search_madrid = DenseVector.zeros[Double](12)
    // sorting by months
    val Madrid_sort = Madrid_Monthly.sort("yearmonth")


    val MadridDouble = Madrid_sort.withColumn("count",toDouble(Madrid_sort("count")))


    MadridDouble.collect().foreach(row=> count_search_madrid(row(0).asInstanceOf[Int]-1)  =row(1).asInstanceOf[Double])


    // for Barcelona

    var count_search_barcelona = DenseVector.zeros[Double](12)
    // sorting by months
    val Barcelona_sort = Barcelona_Monthly.sort("yearmonth")


    val BarcelonaDouble = Barcelona_sort.withColumn("count",toDouble(Barcelona_sort("count")))


    BarcelonaDouble.collect().foreach(row=> count_search_barcelona(row(0).asInstanceOf[Int]-1)  =row(1).asInstanceOf[Double])
    println("Malaga in Blue")
    println("Madrid in Orange")
    println("Barcelona in Green")

    var figu = Figure()
    var dd = figu.subplot(0)
    dd += plot(month,count_search_malaga,'-')
    dd += plot(month,count_search_madrid,'-')
    dd += plot(month,count_search_barcelona,'-')

    figu.refresh()
  }
}



